• isalpha		//
• isdigit		//
• isalnum		//
• isascii		//
• isprint		//
• strlen		//
• memset		//
• bzero			//
• memcpy		//
• memmove		//
• strlcpy		//
• strlcat		//
• toupper		//
• tolower		//
• strchr		//
• strrchr		//
• strncmp		//
• memchr		//
• memcmp		//
• strnstr		//
• atoi			//
• calloc		//
• strdup		//
- [] xd

Function name		ft_substr
Prototype			char *ft_substr(char const *s, unsigned int start, size_t len);
Turn in files		-
Parameters			s: The string from which to create the substring. 
					start: The start index of the substring in the string ’s’.
					len: The maximum length of the substring.
Return value 		The substring.
					NULL if the allocation fails.
External functs. 	malloc
Description 		Allocates (with malloc(3)) and returns a substring from the string ’s’.
					The substring begins at index ’start’ and is of maximum size ’len’.
__________________________________________________________________________________________\\

Function name		ft_strjoin
Prototype			char *ft_strjoin(char const *s1, char const *s2);
Turn in files		-
Parameters			s1: The prefix string.
					s2: The suffix string.
Return value		The new string.
					NULL if the allocation fails.
External functs.	malloc
Description			Allocates (with malloc(3)) and returns a new string, which is the result of the concatenation of ’s1’ and ’s2’.
__________________________________________________________________________________________\\

Function name		ft_strtrim
Prototype			char *ft_strtrim(char const *s1, char const *set);
Turn in files		-
Parameters			s1: The string to be trimmed.
					set: The reference set of characters to trim.
Return value		The trimmed string.
					NULL if the allocation fails.
External functs.	malloc
Description			Allocates (with malloc(3)) and returns a copy of ’s1’ with the characters specified in ’set’ removed from the beginning and the end of the string.
__________________________________________________________________________________________

Function name		ft_split
Prototype			char **ft_split(char const *s, char c);
Turn in files		-
Parameters			s: The string to be split.
					c: The delimiter character.
Return value		The array of new strings resulting from the split.
					NULL if the allocation fails.
External functs.	malloc, free
Description			Allocates (with malloc(3)) and returns an array of strings obtained by splitting ’s’ using the character ’c’ as a delimiter. 
					The array must end with a NULL pointer.
__________________________________________________________________________________________

Function name		ft_itoa
Prototype			char *ft_itoa(int n);
Turn in files		-
Parameters			n: the integer to convert.
Return value		The string representing the integer.
					NULL if the allocation fails.
External functs.	malloc
Description			Allocates (with malloc(3)) and returns a string representing the integer received as an argument.
					Negative numbers must be handled.
__________________________________________________________________________________________

Function name		ft_strmapi
Prototype			char *ft_strmapi(char const *s, char (*f)(unsigned int, char));
Turn in files		-
Parameters			s: The string on which to iterate.
					f: The function to apply to each character.
Return value		The string created from the successive applications of ’f’.
					Returns NULL if the allocation fails.
External functs.	malloc
Description			Applies the function f to each character of the string s, passing its index as the first argument and the character itself as the second. 
					A new string is created (using malloc(3)) to collect the results from the successive applications of f.
__________________________________________________________________________________________\\

Function name		ft_striteri
Prototype			void ft_striteri(char *s, void (*f)(unsigned int, char*));
Turn in files		-
Parameters			s: The string on which to iterate.
					f: The function to apply to each character.
Return value		None
External functs.	None
Description			Applies the function ’f’ on each character of the string passed as argument, passing its index as first argument. 
					Each character is passed by address to ’f’ to be modified if necessary.
__________________________________________________________________________________________\\

Function name		ft_putchar_fd
Prototype			void ft_putchar_fd(char c, int fd);
Turn in files		-
Parameters			c: The character to output.
					fd: The file descriptor on which to write.
Return value		None
External functs.	write
Description			Outputs the character ’c’ to the given file descriptor.
__________________________________________________________________________________________\\

Function name		ft_putstr_fd
Prototype			void ft_putstr_fd(char *s, int fd);
Turn in files		-
Parameters			s: The string to output.
					fd: The file descriptor on which to write.
Return value		None
External functs.	write
Description			Outputs the string ’s’ to the given file descriptor.
__________________________________________________________________________________________\\

Function name		ft_putendl_fd
Prototype			void ft_putendl_fd(char *s, int fd);
Turn in files		-
Parameters			s: The string to output.
					fd: The file descriptor on which to write.
Return value		None
External functs.	write
Description			Outputs the string ’s’ to the given file descriptor followed by a newline.
__________________________________________________________________________________________\\

Function name		ft_putnbr_fd
Prototype			void ft_putnbr_fd(int n, int fd);
Turn in files		-
Parameters			n: The integer to output.
					fd: The file descriptor on which to write.
Return value		None
External functs.	write
Description			Outputs the integer ’n’ to the given file descriptor.
__________________________________________________________________________________________\\